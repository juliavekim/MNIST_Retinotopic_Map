% Learning with a Retinotopic Map using Nesterov Momentum 

% Calls kim_create_mapnet, forward_relu, backprop_relu, kim_nesterov 

clear variables;
clc;
clf;

% Load data 
load 'MNIST.mat' 

% Set up task 
field_frac = 0.25; % "fractional" width of each neuron's input field 
n_neurons_dense = [10]; % # neurons in final layer 
y = kim_create_mapnet([28; 36], field_frac, n_neurons_dense);
n_m = 100; % number of examples per minibatch
n_t = 10000; % number of test examples  
eta = 0.2; % nesterov learning rate 
beta = 0.9; % nesterov hyperparameter 

for i = 1:10 % loop through each epoch 
    shuffle = randperm(size(TRAIN_images, 1)); % shuffle data 
    TRAIN_images = TRAIN_images(shuffle, :);
    TRAIN_answers = TRAIN_answers(shuffle, :);
    TRAIN_labels = TRAIN_labels(shuffle, :);
    for j = 1:600 % loop through each minibatch 
        start_index = (j-1)*100+1; % start index of jth minibatch 
        end_index = j*100; % end index of jth minibatch 
        x = TRAIN_images(start_index:end_index, :)'; % 784x100 matrix of 100 y{1}s 
        y_star = TRAIN_labels(start_index:end_index, :)'; % 10x100 matrix of one-hot label vectors 
        y = forward_relu(y, x); % compute network's output 
        y.y{end} = exp(y.y{end})./sum(exp(y.y{end}), 1); % apply softmax to output signal
        e = y.y{end} - y_star; 
        L = 0.5*sum(sum(e.*e, 1)); 
        y = backprop_relu(y, e); 
        y = kim_nesterov(y, y.dL_dW, y.dL_db, eta, beta);
    end
%   Run network on test set
    x = TEST_images';
    y_star = TEST_labels'; 
    y = forward_relu(y, x); % compute network's output 
    y.y{end} = exp(y.y{end})./sum(exp(y.y{end}), 1); % apply softmax to output signal 
    disp(['Epoch:', num2str(i)])
    [~, one_indices] = max(TEST_labels'); % find index of 1s in each column 
    [~, max_indices] = max(y.y{end}); % find index of max value in each column 
    incorrect_indices = find(max_indices ~= one_indices); % find indices of incorrect guesses  
    num_incorrect = numel(incorrect_indices); % count # incorrect guesses 
    fprintf('%d incorrect matches.\n', num_incorrect);
end 


